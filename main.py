import pip
pip.main(['install', 'pytelegrambotapi'])
import telebot
from telebot import types
import random
import time
import socket
import sys

def check_internet():
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä—É google.com –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ä—Ç—É 80
        socket.create_connection(("www.google.com", 80), timeout=1)
        return True
    except socket.error:
        return False

if check_internet():
    print("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —î")
else:
    print("–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î")

bot = telebot.TeleBot('TOKEN')

@bot.message_handler(commands=['hair'])
def start_handler(message):
    user_id = message.from_user.id
    username = message.from_user.username
    current_time = int(time.time())

    scores_dict = read_scores_from_file()

    if user_id in scores_dict and current_time - scores_dict[user_id]["last_play_time"] < 86400:
        # Executes if the user played less than 24 hours ago
        bot.reply_to(message, f"–¢–∏ –≤–∂–µ –≥—Ä–∞–≤\n \n –£ —Ç–µ–±–µ {scores_dict[user_id]['score']} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤ –≤–æ–ª–æ—Å—Å—è")
    else:
        # Executes if the user can play
        score = random.randint(-20, 20)
        if user_id in scores_dict:
            scores_dict[user_id]["score"] += score
            scores_dict[user_id]["last_play_time"] = current_time
        else:
            scores_dict[user_id] = {"username": username, "score": score, "last_play_time": current_time}

        write_scores_to_file(scores_dict)

        if score < 0:
            bot.reply_to(message, f"–£ —Ç–µ–±–µ –≤—ñ–¥—Ä—ñ–∑–∞–ª–∏ {abs(score)} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤ –≤–æ–ª–æ—Å—Å—è\n \n –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ {scores_dict[user_id]['score']} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤")
        elif score > 0:
            bot.reply_to(message, f"–£ —Ç–µ–±–µ –≤–∏—Ä—ñ—Å–ª–æ {score} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤ –≤–æ–ª–æ—Å—Å—è\n \n –¢–µ–ø–µ—Ä —É —Ç–µ–±–µ {scores_dict[user_id]['score']} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤")
        else:
            bot.reply_to(message, f"–í —Ç–µ–±–µ –≤–∏—Ä–æ—Å–ª–æ 0 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤\n \n –£ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å {scores_dict[user_id]['score']} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤")



@bot.message_handler(commands=['toph', 'tophair'])
def top_handler(message):
    scores_dict = read_scores_from_file()
    top_list = sorted(scores_dict.values(), key=lambda x: x["score"], reverse=True)[:10]

    top_message = "–¢–æ–ø-10 –≥—Ä–∞–≤—Ü—ñ–≤:\n \n"
    for i, player in enumerate(top_list):
        top_message += f"{i + 1}. {player['username']}: {player['score']} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤\n \n"

    bot.reply_to(message, top_message)


def read_scores_from_file():
    scores_dict = {}
    with open('scores.txt', 'r') as f:
        for line in f:
            data = line.strip().split(',')
            user_id = int(data[0])
            username = data[1]
            score = int(data[2])
            last_play_time = int(data[3])
            scores_dict[user_id] = {"username": username, "score": score, "last_play_time": last_play_time}
    return scores_dict


def write_scores_to_file(scores_dict):
    with open('scores.txt', 'w') as f:
        for user_id, data in scores_dict.items():
            f.write(f"{user_id},{data['username']},{data['score']},{data['last_play_time']}\n")

@bot.message_handler(commands=['helph', 'helphair'])
def help_handler(message):
    bot.reply_to(message, "üëã @grow_hair_bot  -  –±–æ—Ç, –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–æ–≥–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ—Å—Ç–∏—Ç–∏ —Å–≤–æ—î –≤–æ–ª–æ—Å—Å—è –Ω–∞ –Ω–æ–≥–∞—Ö —ñ –ø—ñ–¥–Ω—ñ–º–∞—Ç–∏—Å—è —Å—Ö–æ–¥–∏–Ω–∫–∞–º–∏ —Ç–æ–ø—É.\n \n üíª–¶–µ–π –±–æ—Ç –±—É–≤ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π  @Ya_devat_let_dombyl_bambas \n \n ü¶µ–î–ª—è —Ç–æ–≥–æ —â–æ–± —Ä–æ—Å—Ç–∏—Ç–∏ –≤–æ–ª–æ—Å—Å—è –Ω–∞ –Ω–æ–≥–∞—Ö –ø—Ä–æ–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /hair —ñ –≤–∞—à–µ –≤–æ–ª–æ—Å—Å—è –∑–±—ñ–ª—å—à–∏—Ç—å—Å—è –∞–±–æ –∑–º–µ–Ω—à–∏—Ç—å—Å—è –Ω–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤. –†–æ—Å—Ç–∏—Ç–∏ –≤–æ–ª–æ—Å—Å—è –º–æ–∂–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. \n \n ü•á–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ –≤–∞—à–æ–≥–æ —á–∞—Ç—É, –ø—Ä–æ–ø–∏—à—ñ—Ç—å /toph –∞–±–æ /tophair \n \n –°–ø–æ–¥—ñ–≤–∞—é—Å—è —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–ª–∞ –∫–æ—Ä–∏—Å–Ω–∞ –¥–ª—è –≤–∞—Å.üëç")

while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print("Polling failed:", e)
        time.sleep(5)
        continue
